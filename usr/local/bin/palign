#!/bin/bash
#############################################################################
# Copyright 2021 Ramon Fischer                                              #
#                                                                           #
# Licensed under the Apache License, Version 2.0 (the "License");           #
# you may not use this file except in compliance with the License.          #
# You may obtain a copy of the License at                                   #
#                                                                           #
#     http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                           #
# Unless required by applicable law or agreed to in writing, software       #
# distributed under the License is distributed on an "AS IS" BASIS,         #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #
# See the License for the specific language governing permissions and       #
# limitations under the License.                                            #
#############################################################################

main()
{
    declare -a device_name_array=("${@}")

    for device_name in "${device_name_array[@]:-sda}"
    do
        local device_sys_directory="/sys/block/${device_name}"
        local device_queue_directory="${device_sys_directory}/queue"
        local device_logical_block_size_file="${device_queue_directory}/logical_block_size"
        local device_logical_block_size
        local device_physical_block_size_file="${device_queue_directory}/physical_block_size"
        local device_physical_block_size
        declare -A device_block_size_array
        local device_block_size_name
        local device_partition_regex="${device_name}[0-9]+"
        declare -a device_partition_directory_array
        local device_partition_directory
        declare -A device_partition_attribute_array
        local start_sector_size_alignment_result
        local end_sector_size_alignment_result

        if [[ ! -d "${device_sys_directory}" ]]
        then
            echo -e "\e[01;31mSystem directory: '${device_sys_directory}' is missing.\e[0m" >&2
            exit 1
        elif [[ ! -d "${device_queue_directory}" ]]
        then
            echo -e "\e[01;31mQueue directory: '${device_queue_directory}' is missing.\e[0m" >&2
            exit 1
        elif [[ ! -f "${device_logical_block_size_file}" ]]
        then
            echo -e "\e[01;31mLogical block size file: '${device_logical_block_size_file}' is missing.\e[0m" >&2
            exit 1
        elif [[ ! -f "${device_physical_block_size_file}" ]]
        then
            echo -e "\e[01;31mPhysical block size file: '${device_physical_block_size_file}' is missing.\e[0m" >&2
            exit 1
        fi

        device_block_size_array["Logical block size"]=$(< "${device_logical_block_size_file}")
        device_block_size_array["Physical block size"]=$(< "${device_physical_block_size_file}")
        # use shell globbing to determine hard drive partition directories
        device_partition_directory_array=("${device_sys_directory}/${device_name}"*)

        echo -e "\e[01;37m/dev/${device_name}:"
        for device_partition_directory in "${device_partition_directory_array[@]}"
        do
            local device_partition_start_sector_file="${device_partition_directory}/start"
            local device_partition_sector_size_file="${device_partition_directory}/size"
            local device_partition_name="${device_partition_directory##*/}"

            if [[ -f "${device_partition_start_sector_file}" ]]
            then
                device_partition_attribute_array["${device_partition_name}_partition_start_sector_size"]=$(< "${device_partition_directory}/start")
                device_partition_attribute_array["${device_partition_name}_partition_start_sector_size_byte"]=$(( "${device_partition_attribute_array[${device_partition_name}_partition_start_sector_size]}" * 512 ))
            else
                echo -e "\e[01;31mDevice partition start sector file: '${device_partition_start_sector_file}' is missing.\e[0m" >&2
                exit 1
            fi

            if [[ -f "${device_partition_sector_size_file}" ]]
            then
                device_partition_attribute_array["${device_partition_name}_partition_sector_size"]=$(< "${device_partition_directory}/size")
                device_partition_attribute_array["${device_partition_name}_partition_size_byte"]=$(( "${device_partition_attribute_array[${device_partition_name}_partition_sector_size]}" * 512 ))
            else
                echo -e "\e[01;31mDevice partition sector size file: '${device_partition_sector_size_file}' is missing.\e[0m" >&2
                exit 1
            fi

            echo -e "    \e[01;34m/dev/${device_partition_name}\e[0m"
            echo -e "        \e[01;30mStart sector size (${device_partition_attribute_array[${device_partition_name}_partition_start_sector_size]} Sectors, ${device_partition_attribute_array[${device_partition_name}_partition_start_sector_size_byte]} Byte)\e[0m"
            for device_block_size_name in "${!device_block_size_array[@]}"
            do
                printf "            Divided by '${device_block_size_name}' (${device_block_size_array[${device_block_size_name}]} Byte): \t%f Sectors " "$(( ${device_partition_attribute_array[${device_partition_name}_partition_start_sector_size]} / ${device_block_size_array[${device_block_size_name}]} ))"
                # result must be "0" in order to have optimal partition alignment.
                start_sector_size_alignment_result=$(( "${device_partition_attribute_array[${device_partition_name}_partition_start_sector_size]}" % "${device_block_size_array[${device_block_size_name}]}" ))

                if [[ "${start_sector_size_alignment_result}" == "0" ]]
                then
                    echo -e "\t\e[01;32mPartition alignment optimal.\e[0m"
                else
                    echo -e "\t\e[01;31mPartition not aligned!\e[0m"
                fi
            done
            unset device_block_size_name

            #device_partition_attribute_array["${device_partition_name}_partition_end_sector_size"]=$(( "${device_partition_attribute_array[${device_partition_name}_partition_sector_size]}" + "${device_partition_attribute_array[${device_partition_name}_partition_start_sector_size]}" - 1 ))
            #device_partition_attribute_array["${device_partition_name}_partition_end_sector_size_byte"]=$(( "${device_partition_attribute_array[${device_partition_name}_partition_size_byte]}" + "${device_partition_attribute_array[${device_partition_name}_partition_start_sector_size_byte]}" - 1 ))

            # check partition end sector alignment
            #echo -e "        \e[01;30mEnd sector size (${device_partition_attribute_array[${device_partition_name}_partition_end_sector_size]} Sectors)\e[0m"
            #for device_block_size_name in "${!device_block_size_array[@]}"
            #do
            #    printf "            Divided by '${device_block_size_name}' (${device_block_size_array[${device_block_size_name}]} Byte): \t%f Byte " "$(( ${device_partition_attribute_array[${device_partition_name}_partition_end_sector_size]} / ${device_block_size_array[${device_block_size_name}]} ))"
            #    # result must be "0" in order to have optimal partition alignment.
            #    end_sector_size_alignment_result=$(( "${device_partition_attribute_array[${device_partition_name}_partition_end_sector_size]}" % "${device_block_size_array[${device_block_size_name}]}" ))

            #    if [[ "${end_sector_size_alignment_result}" == "0" ]]
            #    then
            #        echo -e "\t\e[01;32mPartition alignment optimal.\e[0m"
            #    else
            #        echo -e "\t\e[01;31mPartition not aligned!\e[0m"
            #    fi
            #done
            #unset device_block_size_name
        done
        echo ""
    done
}

main "${@}"
